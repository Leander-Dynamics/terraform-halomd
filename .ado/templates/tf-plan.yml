# Terraform plan with AKV secret retrieval and optional temporary IP allow-listing

parameters:
  - name: envName
    type: string
  - name: serviceConnection
    type: string
  - name: tfVersion
    type: string
    default: '1.7.5'
  - name: lockTimeout
    type: string
    default: '20m'
  - name: extraVarFlags
    type: string
    default: ''
  - name: variableGroup
    type: string
    default: ''
  # AKV integration
  - name: useAkv
    type: string
    default: 'false'
  - name: akvName
    type: string
    default: ''
  - name: akvEnableDynamicIp
    type: string
    default: 'false'
  - name: akvSecretSqlAdminLoginName
    type: string
    default: 'sql-admin-login'
  - name: akvSecretSqlAdminPasswordName
    type: string
    default: 'sql-admin-password'
  - name: pipelineSqlAdminLogin
    type: string
    default: ''
  - name: pipelineSqlAdminPassword
    type: string
    default: ''

jobs:
- job: plan_${{ parameters.envName }}
  displayName: "Plan (${{ parameters.envName }})"
  ${{ if ne(parameters.variableGroup, '') }}:
    variables:
      - group: ${{ parameters.variableGroup }}
  steps:
  - checkout: self
  - task: AzureCLI@2
    displayName: "Azure login & terraform plan (${{ parameters.envName }})"
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -euo pipefail
        az account show --query "{name:name, sub:id, tenant:tenantId}" -o table || true

        TFV='${{ parameters.tfVersion }}'
        if ! command -v terraform >/dev/null 2>&1 || ! terraform version | head -1 | grep -q "v${TFV}"; then
          sudo apt-get update -y && sudo apt-get install -y unzip curl
          curl -fsSL -o /tmp/tf.zip "https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip"
          sudo unzip -o /tmp/tf.zip -d /usr/local/bin
        fi
        terraform -version

        # ---- AKV integration (optional) ----
        USE_AKV='${{ parameters.useAkv }}'
        KV_NAME='${{ parameters.akvName }}'
        DYN_IP='${{ parameters.akvEnableDynamicIp }}'
        SECRET_LOGIN='${{ parameters.akvSecretSqlAdminLoginName }}'
        SECRET_PASS='${{ parameters.akvSecretSqlAdminPasswordName }}'
        AKV_VAR_FLAGS=""
        SUB_TENANT_VAR_FLAGS=""

        if [[ "$USE_AKV" == "true" && -n "$KV_NAME" ]]; then
          if [[ "$DYN_IP" == "true" ]]; then
            echo "Detecting agent public IP for temporary KV allow-list..."
            AGENT_IP="$(curl -fsSL https://api.ipify.org || curl -fsSL https://ifconfig.me || echo "")"
            if [[ -n "$AGENT_IP" ]]; then
              echo "Adding agent IP ${AGENT_IP} to Key Vault firewall temporarily..."
              az keyvault network-rule add --name "$KV_NAME" --ip-address "${AGENT_IP}" || echo "WARN: could not add IP rule"
              trap 'echo "Removing agent IP ${AGENT_IP} from Key Vault firewall..."; az keyvault network-rule remove --name "$KV_NAME" --ip-address "${AGENT_IP}" || true' EXIT
            else
              echo "WARNING: Could not determine agent IP; proceeding without temporary rule."
            fi
          fi

        fi

        # Pull secrets from Key Vault or pipeline variables without echoing sensitive data
        set +x
        SQL_ADMIN_LOGIN=""
        SQL_ADMIN_PASSWORD=""
        PIPELINE_SQL_ADMIN_LOGIN="${PIPELINE_SQL_ADMIN_LOGIN:-}"
        PIPELINE_SQL_ADMIN_PASSWORD="${PIPELINE_SQL_ADMIN_PASSWORD:-}"

        if [[ "$USE_AKV" == "true" && -n "$KV_NAME" ]]; then
          KV_SQL_ADMIN_LOGIN="$(az keyvault secret show --vault-name "$KV_NAME" --name "$SECRET_LOGIN" --query value -o tsv || true)"
          KV_SQL_ADMIN_PASSWORD="$(az keyvault secret show --vault-name "$KV_NAME" --name "$SECRET_PASS" --query value -o tsv || true)"

          if [[ -n "$KV_SQL_ADMIN_LOGIN" ]]; then
            SQL_ADMIN_LOGIN="$KV_SQL_ADMIN_LOGIN"
          fi
          if [[ -n "$KV_SQL_ADMIN_PASSWORD" ]]; then
            SQL_ADMIN_PASSWORD="$KV_SQL_ADMIN_PASSWORD"
          fi
        fi

        if [[ -z "$SQL_ADMIN_LOGIN" && -n "$PIPELINE_SQL_ADMIN_LOGIN" ]]; then
          SQL_ADMIN_LOGIN="$PIPELINE_SQL_ADMIN_LOGIN"
        fi
        if [[ -z "$SQL_ADMIN_PASSWORD" && -n "$PIPELINE_SQL_ADMIN_PASSWORD" ]]; then
          SQL_ADMIN_PASSWORD="$PIPELINE_SQL_ADMIN_PASSWORD"
        fi

        if [[ -n "$SQL_ADMIN_LOGIN" && -n "$SQL_ADMIN_PASSWORD" ]]; then
          AKV_VAR_FLAGS="-var \"sql_admin_login=${SQL_ADMIN_LOGIN}\" -var \"sql_admin_password=${SQL_ADMIN_PASSWORD}\""
        else
          echo "NOTE: SQL admin credentials not supplied via Key Vault or pipeline variables for '${{ parameters.envName }}'. Skipping SQL vars."
        fi
        set -x

        cd platform/infra/envs/${{ parameters.envName }}
        if [[ -n "${AZ_SUBSCRIPTION_ID:-}" ]]; then
          SUB_TENANT_VAR_FLAGS="${SUB_TENANT_VAR_FLAGS} -var \"subscription_id=${AZ_SUBSCRIPTION_ID}\""
        fi
        if [[ -n "${AZ_TENANT_ID:-}" ]]; then
          SUB_TENANT_VAR_FLAGS="${SUB_TENANT_VAR_FLAGS} -var \"tenant_id=${AZ_TENANT_ID}\""
        fi

        terraform init -reconfigure -backend-config=backend.tfvars -lock-timeout='${{ parameters.lockTimeout }}'
        terraform plan -input=false -var-file=terraform.tfvars ${{ parameters.extraVarFlags }} ${SUB_TENANT_VAR_FLAGS} ${AKV_VAR_FLAGS} -out "$BUILD_SOURCESDIRECTORY/tfplan-${{ parameters.envName }}.tfplan"
    env:
      PIPELINE_SQL_ADMIN_LOGIN: ${{ parameters.pipelineSqlAdminLogin }}
      PIPELINE_SQL_ADMIN_PASSWORD: ${{ parameters.pipelineSqlAdminPassword }}
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)/tfplan-${{ parameters.envName }}.tfplan'
      artifact: 'tfplan-${{ parameters.envName }}'
