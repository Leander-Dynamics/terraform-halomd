parameters:
  - name: envName
    type: string
  - name: serviceConnection
    type: string
  - name: tfVersion
    type: string
    default: '1.7.5'
  - name: lockTimeout
    type: string
    default: '20m'

jobs:
- deployment: apply_${{ parameters.envName }}
  displayName: "Apply (${{ parameters.envName }})"
  environment: ${{ parameters.envName }}
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self

        # Use @2 unless you specifically need @3 features
        - task: DownloadPipelineArtifact@2
          displayName: "Download plan artifact"
          inputs:
            buildType: 'current'
            artifact: 'tfplan-${{ parameters.envName }}'
            path: '$(Pipeline.Workspace)/plans/${{ parameters.envName }}'

        - task: AzureCLI@2
          displayName: "Azure login & terraform apply (${{ parameters.envName }})"
          inputs:
            azureSubscription: '${{ parameters.serviceConnection }}'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              # Safer shell flags (portable)
              set -e
              set -u
              set -o pipefail

              # Show which subscription we're logged into (debug/trace)
              az account show --query '{sub:name, id:id, tenant:tenantId}' -o tsv || true

              TFV='${{ parameters.tfVersion }}'

              # Ensure the requested Terraform version is present
              if ! command -v terraform >/dev/null 2>&1 || ! terraform version | head -1 | grep -q "v${TFV}"; then
                sudo apt-get update -y && sudo apt-get install -y unzip curl
                curl -fsSL -o /tmp/tf.zip "https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip"
                sudo unzip -o /tmp/tf.zip -d /usr/local/bin
              fi

              terraform -version
            
              # Move to the env working directory (must match where plan was created)
              cd platform/infra/envs/${{ parameters.envName }}

              # Init backend (reconfigure ensures the local .terraform matches this backend)
              terraform init -reconfigure \
                -backend-config=backend.tfvars \
                -lock-timeout='${{ parameters.lockTimeout }}'

              # Apply the previously generated plan file (NO extra '.' at the end)
              terraform apply -input=false -auto-approve \
                "$(Pipeline.Workspace)/plans/${{ parameters.envName }}/tfplan-${{ parameters.envName }}.tfplan"
