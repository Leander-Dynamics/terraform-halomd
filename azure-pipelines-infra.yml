trigger:
  branches:
    include: [ main ]

parameters:
  - name: environment
    type: string
    default: dev
    values: [ dev, qa, stage, prod ]

variables:
  azureServiceConnection: 'AzureServiceConnection'   # <-- change to your service connection
  subscriptionId: '930755b1-ef22-4721-a31a-1b6fbecf7da6'  # <-- your subscription

stages:
- stage: Terraform
  displayName: 'Terraform: ${{ parameters.environment }}'
  jobs:
  - job: PlanAndApply
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: 'Terraform init/validate/plan'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/platform/infra/envs/${{ parameters.environment }}'
        inlineScript: |
          set -e
          az account set --subscription $(subscriptionId)
          terraform init -backend-config=backend.tfvars
          terraform validate
          terraform plan -var-file=terraform.tfvars -out=tfplan

    - ${{ if or(eq(parameters.environment, 'stage'), eq(parameters.environment, 'prod')) }}:
      - task: ManualValidation@0
        inputs:
          instructions: 'Review the Terraform plan. Approve to apply.'
          onTimeout: 'reject'
          timeout: '43200'

    - task: AzureCLI@2
      displayName: 'Terraform apply'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/platform/infra/envs/${{ parameters.environment }}'
        inlineScript: |
          set -e
          az account set --subscription $(subscriptionId)
          terraform apply -auto-approve tfplan
